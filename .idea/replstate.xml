<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1413977056930">{:repl-history {:ide [], :local [&quot;(find-a-next [1 2] ( [2 4] [4 5] [5 1]))&quot; &quot;(find-a-next [1 2] '( [2 4] [4 5] [5 1]))&quot; &quot;(merge-two-neighbors [1 2] [2 4])&quot; &quot;(merge-two-neighbors (1 2) [2 4])&quot; &quot;(first [[1 2]])&quot; &quot;(rest )&quot; &quot;(rest [[1 2] [2 4] [4 5] [5 1]])&quot; &quot;(seq (rest [[1 2] [2 4] [4 5] [5 1]]))&quot; &quot;(if (seq (rest [[1 2] [2 4] [4 5] [5 1]])) 1 2)&quot; &quot;(longest-path [[1 2] [2 4] [4 5] [5 1]])&quot; &quot;(longest-path [[1 2] [2 4] [4 6] [5 1]])&quot; &quot;(longest-path [[1 2][2 3] [3 1]])&quot; &quot;(longest-path [[1 2][3 1] [ 2 3]])&quot; &quot;(longest-path [[1 2][3 1] [ 2 4]])&quot; &quot;(longest-path [[2 3] [3 1] [1 2]])&quot; &quot;(longest-path #{[2 3] [3 1] [1 2]})&quot; &quot;(reduce = [ 2 2])&quot; &quot;(reduce = [ 2 3])&quot; &quot;(reduce = [ 2 2 3])&quot; &quot;(vals { 1 2})&quot; &quot;(graph-has-cycles [[1 2] [2 4] [4 5] [5 1]])&quot; &quot;(graph-has-cycles [[1 2] [2 4] [6 7] [7 8]])&quot; &quot;(graph-has-cycles [[1 2] [2 4] [6 7] [7 8] ])&quot; &quot;(graph-has-cycles [[1 2] [2 4] [6 7] [7 8] [4 1]])&quot; &quot;(graph-has-cycles [[1 2] [8 6] [2 4] [6 7] [7 8] [4 1]])&quot; &quot;(cluster-connected-edges [[1 2] [2 3]])&quot; &quot;(cluster-connected-edges [[1 2] [3 2]])&quot; &quot;(cluster-connected-edges [[1 2] [2 3] [3 2]])&quot; &quot;(cluster-connected-edges [[1 2] [3 2] [2 3] ])&quot; &quot;(cluster-connected-edges [[2 3] [1 2] [3 2]  ])&quot; &quot;(dosync (put-edge-in-stacks! (ref {}) (ref 0) [2 1]))&quot; &quot;(cluster-edges-2 [[1 2] [2 3] [4 5] [5 6]]) &quot; &quot;(cluster-edges [[1 2] [2 3] [4 5] [5 6]]) &quot; &quot;(cluster-connected-edges [[1 2] [2 3] [4 5] [5 6]]) &quot; &quot;(graph-has-cycles [[1 2] [ 2 1] [2 3] [3 4] [4 5]])&quot; &quot;(graph-has-cycles [[1 2]  [2 3] [3 4] [4 5] [2 1]])&quot; &quot;(cluster-connected-edges [[1 2] [ 2 1] [2 3] [3 4] [4 5]])&quot; &quot;(longest-path [[1 2] [2 3] [ 3 4] [4 1] [4 5]] [1 2] )&quot; &quot;(longest-path [[1 2] [2 3] [ 3 4] [4 1] [4 5]] [4 1] )&quot; &quot;(longest-path [[1 2] [2 3] [ 3 4] [4 1] [4 5]] [3 4] )&quot; &quot;(longest-path [[4 5] [1 2] [2 3] [ 3 4] [4 1] [4 5]] )&quot; &quot;(longest-path [[4 5] [1 2] [2 3] [ 3 4] [4 1]] )&quot; &quot;(longest-path [[2 3] [1 2]  [ 3 4] [4 1]] )&quot; &quot;(longest-path [[2 3] [1 2]  [ 3 4] [4 1]] [2 3] )&quot; &quot;(longest-path [[2 3] [1 2]  [ 3 4] [4 1]] [4  5] )&quot; &quot;(longest-path [[2 3] [1 2]  [ 3 4] [4 1] [ 4 5]] [4  5] )&quot; &quot;(def g [[3 4] [2 3] [1 2] [3 1]])&quot; &quot;(map (partial longest-path g ) g)&quot; &quot;(longest-path  [[3 4] [2 3] [1 2] [3 1]] [3 1])&quot; &quot;(longest-path  [[3 4] [2 3] [1 2] [3 1]] [1 2])&quot; &quot;(longest-path  [[3 4] [2 3]  [3 1]] [1 2])&quot; &quot;(longest-path  [[1 2] [2 3]  [3 1]] [1 2])&quot; &quot;(longest-path  [ [2 3] [ 1 2]  [3 1]] [1 2])&quot; &quot;(longest-path  [ [2 3]   [3 1] [ 1 2]] [1 2])&quot; &quot;(longest-path  [ [2 3]   [3 1] [1 4] [ 1 2]] [1 2])&quot; &quot;(longest-path  [ [2 3]   [3 1] [1 4] [ 1 2]])&quot; &quot;(cycle)&quot; &quot;(longest-path  [   [3 1] [1 4] [ 1 2] [2 3]])&quot; &quot;(longest-path  [    [1 4] [ 1 2] [2 3] [3 4]])&quot; &quot;(longest-path  [     [ 1 2] [2 3] [3 4] [1 4]])&quot; &quot;(longest-path  [     [ 1 2] [2 3] [3 1] [1 4]])&quot; &quot;(longest-path  [    [2 3] [ 1 2]  [3 1] [1 4]])&quot; &quot;(longest-path  [    [2 3] [ 1 2]  [1 4] [3 1] ])&quot; &quot;(longest-path  [    [2 3] [ 1 2]  [1 4] [3 1] ] [2 3])&quot; &quot;(longest-path-starting-from  [    [2 3] [ 1 2]  [1 4] [3 1] ])&quot; &quot;(longest-path-starting-from  [[2 3] [ 1 2]  [1 4] [3 1] ] [1 2])&quot; &quot;(longest-path-starting-from  [[2 3] [ 1 2]  [1 4] [3 1] ] [1 4])&quot; &quot;(longest-path-starting-from  [[2 3] [ 1 2]  [1 4] [3 1] ] [3 1])&quot; &quot;(longest-path-starting-from  [[2 3] [3 1] [ 1 2]  [1 4]  ] [3 1])&quot; &quot;(longest-path-starting-from  [[1 4]  [3 1] [ 1 2]  [2 3]] [3 1])&quot; &quot;(longest-path-starting-from  [[1 4] [ 1 2]  [2 3]] [3 1])&quot; &quot;(longest-path-starting-from  [ [ 1 2]  [2 3] [ 1 4]] [3 1])&quot; &quot;(longest-path-starting-from  [ [ 1 4]  [2 3] [ 1 2]] [3 1])&quot; &quot;(longest-path-starting-from  [ [ 1 4]  [3 1] [ 1 2]] [1 2])&quot; &quot;(longest-path-starting-from  [ [ 1 4]  [3 1] [ 2 3]] [1 2])&quot; &quot;(def g [[1 2] [3 4] [ 1 3] [3 1] [2 3]])&quot; &quot;(map (partial longest-path-starting-from g) g)&quot; &quot;(filter #(= (first %) (last %) (map (partial longest-path-starting-from g) g)))&quot; &quot;(filter #(= (first %) (last %)) (map (partial longest-path-starting-from g) g))&quot; &quot;(graph-has-cycles g)&quot; &quot;(graph-has-cycles [[1 2] [2 3]])&quot; &quot;(graph-has-cycles [[2 1] [2 3]])&quot; &quot;(graph-has-cycles [[1 2] [2 3] [3 1] [1 4] [1 2]])&quot; &quot;(graph-has-cycles [[1 2] [2 3] [3 1] [1 4] [2 1]])&quot; &quot;(graph-has-cycles [[2 1] [2 3] [3 1] [1 4] [1 2]])&quot; &quot;(graph-has-cycles [[2 1] [2 3] [3 1] [1 2] [1 4]])&quot; &quot;(graph-has-cycles [[2 3] [2 1]  [3 1] [1 2] [1 4]])&quot; &quot;(cluster-connected-edges [[2 3] [2 1]  [3 1] [1 2] [1 4]])&quot; &quot;(find-nexts [[2 1] [2 3] [2 4]] 2)&quot; &quot;(find-nexts [[2 1] [2 3] [2 4]] [1 2])&quot; &quot;(def g (graph [ 1 2] [ 2 3] [3 1]))&quot; &quot;(def g (loom.graph/graph [ 1 2] [ 2 3] [3 1]))&quot; &quot;g&quot; &quot;(bf-pat)&quot; &quot;(def g (loom.graph/digraph [ 1 2] [ 2 3] [3 1]))&quot; &quot;(directed? g)&quot; &quot;(loom.graph/directed? g)&quot; &quot;(loom.alg/bf-path g 1 2)&quot; &quot;(def g (loom.graph/digraph [ 1 2] [ 2 3] [3 4]))&quot; &quot;(loom.alg/bf-path g 1 3)&quot; &quot;(loom.alg/bf-path g 3 1)&quot;], :remote []}}</component>
</project>

